[
   { "tile": "GOATOOLS GO Grouping",
    "short-desc": "Web Interface for Gene Ontology Enrichment Analysis",
    "img-base": "assets/img/goatools-results-download",
    "img-alt": "Screenshot of the GOATOOLS project",
    "intro-desc": "This is a project that I built for a biology paper. Given a command line program that was written in Python, I was tasked with building the web interface. This project was more challengin since it also required me to handle some backend code. I ended up writing functions that interface with the GOATOOLS command line program and building up the web interface using Django as well as Javascript.",
    "main-desc": "After expressing my interest in working on this paper/project, I spent some time playing around with the program for which I was to build an interface. As I explored the program it became clear to me that more than front-end code was going to be required of me. I first researced basic python web interfaces and wrote a very simple CGI script that assured me I could make this happen. After getting the CGI script working, it was obvious to me that this was going to be a cumbersome solution if the project required much more than I had accomplished.",
    "outro-desc": "Grudgingly, I decided that I would learn the very basics of a Python framework and settled on Django. After spending a day going through the tutorial, I spent the next next week rebuilding the exploratory code I had written. Having that accomplished allowed me to focus on the Front-end work for which I have studied. With a deadline of 1-2 weeks before the contributing authors would be expecting to see the inteface, I called on Bootstrap to get a basic usable site going. The next step is to get this onto a viable webhost rather than the virtual maching that I have running on my Windows machin.",
    "intro-pic": "",
    "intro-pic-alt": "",
    "main-pic": "",
    "main-pic-alt": "",
    "outro-pic": "",
    "outro-pic-alt": "",
    "long-desc": "",
    "date-completed": "Aug-Sep 2016",
    "url": "#TODO",
    "tech-used": "python, Django, Javascript, HTML, CSS, Bootstrap, Vagrant, Virtualbox, SQLite, git, Github",

  },{ "tile": "Dapper Goose Website",
    "short-desc": "This is my initial concept for 'The Dapper Goose', a restaurant a friend of mine was helping to open. The layout is only partially ready for mobile and the project was abandoned since in their haste to register a domain name they signed up for Squarespace. While it would have been possible to host the site I was making there, it would have required ongoing support, which I was unable to offer gratis, whenever there were updates to the Squarespace platform.",
    "img-base": "",
    "img-alt": "",
    "intro-desc": "The primary goal for this site was to keep it simple. A new restaurant for which the owners moved to a new city implied that the site would change very quickly. New opportunities and unexpected market trends all but guaranteed that the site would have to change quickly so I focused only on the information that would be of the utmost importance.",
    "main-desc": "With that knowledge, I decided that the menu was of primary importance so I hard coded the menu information into the HTML and used Javascript to only show the relevant menu. This provided for a very quick display of menu changes without the annoyance of downloading a PDF which so many restaurant sites rely upon. The next most important information was of course location and contact info, but since it was a new restaurant, I hightlighted the Owner and Chef first. Because this information was less important but further up in the hierarchy, I hid the details about the owners until this user clicks on the somewhat subtle hover aciton.",
    "outro-desc": "Unfortunately, I was unable to see this site through to the end because the management team signed up with Squarespace in a rush because they were afraid of losing their domain name. Part of the agreement upon signup is that you must use their service for 3 months before transferring a domain and I could not offer free updates to the site I was building based upon an unknown Squarespace update schedule. I had a great time working on the site and received good feedback from the owner but felt that it was in their best interest to use the Squarespace tools. I hope that in a couple of months I will be able to help them build a great new site.",
    "intro-pic": "",
    "intro-pic-alt": "",
    "main-pic": "",
    "main-pic-alt": "",
    "outro-pic": "",
    "outro-pic-alt": "",
    "long-desc": "",
    "date-completed": "June 2016",
    "url": "Buffalo-Site",
    "tech-used": "Yeoman, Bootstrap, Jquery, Javascript, HTML, CSS",

  },{
    "title": "Neighborhood Map",
    "short-desc": "This is a project that I completed as part of my Front End Nanodegree at Udacity.com. It uses the Wikipedia, Foursquare, Google Maps, and Google Places APIs and AJAX calls to provide data about interesting places in my neighborhood. It was built using knockout.js for two-way data-binding.",
    "img-base": "assets/img/NeighborhoodMap",
    "img-alt": "Screenshot of my Neighborhood Map project",
    "intro-desc": "The requirements for this site were the make AJAX calls to various web services to provide information on points of interest in the Neighborhood where you live. I decided to focus on Museums and Parks. Minimum requirements called for at least 1 API call but I decided to use the Foursquare, Wikipedia, and Google Placec API for my map.",
    "main-desc": "Making AJAX calls for data was the tip of the iceberf here. The ultimate purpose of this exercise was to use data-binding with asychronous requests. This is a rather simple process until you start mixing a number of events. A common problem, which sadly I suffered from as well was to display information in Google Maps Info Window only to have said information be incorrect. The trick to this was handling the asychronous information with callback which can be mindbending the first time you deal with it.",
    "outro-desc": "While this app would have benefited from the work of a designer, which I could have translated into code, I am proud of being able to call 3 API's and have a very responsive app. I am also very certain that because of the way that I separated the code, I could add a loaction call to the app to get a user's location and make this usable nearly anywhere."
    "intro-pic": "assets/img/test",
    "intro-pic-alt": "TODO",
    "main-pic": "assets/img/test",
    "main-pic-alt": "TODO",
    "outro-pic": "assets/img/test",
    "outro-pic-alt": "TODO",
    "long-desc": "TODO",
    "date-completed": "Feb 2016",
    "url": "Neighborhood-Map",
    "tech-used": "HTML, CSS, Knockout.js, AJAX, Various APIs"
  },{
    "title": "Frogger Clone",
    "short-desc": "I completed this project as part of the Udacity.com Front End Nanodegree. I was provided with all of the sprites for the game as well as a game engine. My job was to write the prototypes for the different objects(i.e. player, gems, and enemies) as well as write the collision logic. I decided that I also wanted to add score keeping as well as a nifty start screen that was drawn using HTML Canvas.",
    "img-base": "assets/img/frogger",
    "img-alt": "Screenshot of my Frogger Clone",
    "intro-desc": "Given an engine as well as assets, I was expected to make a working clone of the game 'Frogger'. While wrapping my head around the engine loop at first was discouraging, I enventually understood what was happening and the significance of RequestAnimationLoop.",
    "main-desc": "Once I understood what was happening in the game engine, I focused on the logic of game elements. Using Object Oriented Programming, there were classes(enemies, gems, and the player) which could inherit a single placement method. I then added methods that were unique to each of the classes. For example, the Player class had addToLife and addToScore while the enemies had a unique update method. Of course gems also needed an apply method that applied the powerup specific to that gem.",
    "outro-desc": "After making sure that the Objects and Instances were all working appropriately, I realized that a game isn't a game without a score. Thus, I decided to add the Start and End screens. I used HTML canvas to generate the screens and localstorage to keep track of an individuals scores. If I were to continue developing this game in the future, I would want to write functions that called a database, either cloud or managed server, and I would probably revisit HTML canvas to see if there is a better option for the start and end screens.",
    "intro-pic": "assets/img/test",
    "intro-pic-alt": "TODO",
    "main-pic": "assets/img/test",
    "main-pic-alt": "TODO",
    "outro-pic": "assets/img/test",
    "outro-pic-alt": "TODO",
    "long-desc": "TODO",
    "date-completed": "Nov 2015",
    "url": "Frogger-Clone",
    "tech-used": "HTML Canvas, Javascript, TODO"
  },{
    "title": "Mobile Portfolio",
    "short-desc": "The primary goal of this Udacity.com project was to focus on performance. By moving document queries out of loops I was able to speed this site up significantally. The page started out with a Page Speed Insights mobile score in the 70s which I was able to improve to a score of 95.",
    "img-base": "assets/img/MobilePortfolio",
    "img-alt": "Screenshot of my Mobile Portfolio project",
    "intro-desc": "I will not wait for your site any longer. Speed is an incredibly important aspect for any website and the main goal of this project was to focus on what can slow down a page and to eliminate the problem. If a page doesn't load in 2 seconds, even on mobile, there is a problem! I was given the task of finding performance bottlenecks and making decisions to fix them.",
    "main-desc": "The biggest problem with the website when I started were expensive function calls placed in loops. The biggest performance gains came from shifting only a few lines, meaning that those expensive functions were called only once instead of, hopefully, only a few times. I made a couple of other minor improvements to the site by finding less intensive calls in Jquery than the ones that were originally used, but these were minor improvemnts.",
    "outro-desc": "The moral of the story is to never make repeated calls to an expensive function within a loop. I solved this by caching a query and using the cached result in the loop. HOORAY!",
    "intro-pic": "assets/img/test",
    "intro-pic-alt": "TODO",
    "main-pic": "assets/img/test",
    "main-pic-alt": "TODO",
    "outro-pic": "assets/img/test",
    "outro-pic-alt": "TODO",
    "long-desc": "TODO",
    "date-completed": "Dec 2015",
    "url": "Mobile-Portfolio",
    "tech-used": "Javascript refactoring"
  },{
    "title": "Resume Project",
    "short-desc": "My resume project for Udacity.com's Front End Nanodegree. This was an exercise in using JSON objects for data-binding. It also provide a very brief encounter with the Google Maps API. The purpose of this project was to lay the groundwork for future projects that would rely more on external data.",
    "img-base": "assets/img/Resume",
    "img-alt": "Screenshot of my resume project",
    "intro-desc": "How should on learn the basics of data manipulation on the web? One great way to start would be to build a resume website. It's perfect because the information changes not daily, but frequently, and editing and HTML document with that information will not only be tedious but result in a ridiculous amount of duplicate code for relatively small amounts of information. The purpose of this project was to get rid of the redundant code and provide a JSON object which could be parsed to make the page.",
    "main-desc": "To start the project, I was given a file called helper.js which had all of the HTML written and assigned to variables. My purpose was to use the %data% placeholders to fill in the data that was relevant to my experience. The exercise also served as an intro to methods in Object Oriented Programming. The objects that were created to represent my work experience were Javascript objects, which are the basis of JSON, so I added display() methods to the objects and used those methods to add data to the given HTML.",
    "outro-desc": "This was an incredible introduction to data-binding and showed you how you can in fact 'do it yourself'. However the more important lesson in this project is the concept, which lifts the veil on what a number of the .js tools are doing. ",
    "intro-pic": "assets/img/test",
    "intro-pic-alt": "TODO",
    "main-pic": "assets/img/test",
    "main-pic-alt": "TODO",
    "outro-pic": "assets/img/test",
    "outro-pic-alt": "TODO",
    "long-desc": "TODO",
    "date-completed": "Oct 2015",
    "url": "Resume",
    "tech-used": "HTML, CSS, Javascript, JQuery"
  },{
    "title": "Portfolio Site",
    "short-desc": "In my first project for my Front End Nanodegree I was given the equivalent of a Photoshop comp and given the task of styling the page to the comps specifications. Having no projects to highlight, I used some photography that I have shot.",
    "img-base": "assets/img/Portfolio",
    "img-alt": "Screenshot of my first portfolio site",
    "intro-desc": "This is a bunch of stuff that I will want to say about the beginning phase of the project. I will have to talk about the inspiration of the project, the first steps that were taken, and how I decided what the next steps would be. Be thorough but concise.",
    "main-desc": "A whole lot more of text about the project describing what happened next and why it was important. Include technical challenges and how you overcame them as well as why the solution was interesting",
    "outro-desc": "Talk about the successes of the project and why you are proud of your work. This is the time to really sell what you did and why people should think that you are the best thing since sliced bread.",
    "intro-pic": "assets/img/test",
    "intro-pic-alt": "TODO",
    "main-pic": "assets/img/test",
    "main-pic-alt": "TODO",
    "outro-pic": "assets/img/test",
    "outro-pic-alt": "TODO",
    "long-desc": "TODO",
    "date-completed": "Sept 2015",
    "url": "Portfolio",
    "tech-used": "HTML, CSS, Grunt"
  }
]
